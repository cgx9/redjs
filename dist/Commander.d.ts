/// <reference types="node" />
import { Timer } from './utils/Timer';
import EventEmitter = require('events');
import { RedjsServer } from './RedjsServer';
import { Datastore } from './data/Datastore';
import { Connection } from './Connection';
import { KeysCommands } from './Commands/KeysCommands';
import { HashesCommands } from './Commands/HashesCommands';
import { PubSubCommands } from './Commands/PubSubCommands';
import { ListsCommands } from './Commands/ListsCommands';
import { SetsCommands } from './Commands/SetsCommands';
import { SortedSetsCommnands } from './Commands/SortedSetsCommnands';
import { ServerCommands } from './Commands/ServerCommands';
import { ConnectionCommands } from './Commands/ConnectionCommands';
import { StringsCommands } from './Commands/StringsCommands';
import { TransactionsCommand } from './Commands/TransactionsCommand';
import { ClusterCommands } from './Commands/ClusterCommands';
import { GeoCommands } from './Commands/GeoCommands';
import { HyperLogLogCommands } from './Commands/HyperLogLogCommands';
import { ScriptingCommands } from './Commands/ScriptingCommands';
import { StreamsCommands } from './Commands/StreamsCommands';
import { AbstractCommands } from './Commands/AbstractCommands';
export declare class Commander extends EventEmitter {
    protected config: any;
    protected server: RedjsServer;
    protected datastore: Datastore;
    protected logger: any;
    protected mainTimer: Timer;
    protected commands: any;
    protected hashesCommands: HashesCommands;
    protected keysCommands: KeysCommands;
    protected pubsubCommands: PubSubCommands;
    protected setsCommands: SetsCommands;
    protected sortedSetsCommnand: SortedSetsCommnands;
    protected listsCommands: ListsCommands;
    protected stringsCommands: StringsCommands;
    protected connectionCommands: ConnectionCommands;
    protected serverCommands: ServerCommands;
    protected transactionsCommands: TransactionsCommand;
    protected clusterCommands: ClusterCommands;
    protected geoCommands: GeoCommands;
    protected hyperLogLogCommands: HyperLogLogCommands;
    protected scriptingCommands: ScriptingCommands;
    protected streamsCommands: StreamsCommands;
    protected sortedSetsCommnands: SortedSetsCommnands;
    constructor(opt: any);
    execCommand(conn: Connection, checkOnly: boolean, cmd: string, ...args: any[]): any;
    protected addCommands(manager: AbstractCommands): void;
}
